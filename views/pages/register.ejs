<div class="text-center mb-4">
  <h1 class="text-2xl font-bold bg-gradient-to-r from-primary-500 to-secondary-500 text-transparent bg-clip-text">Create Account</h1>
  <p class="text-dark-500 mt-1 text-sm">Join our community today</p>
</div>

<!-- Error Alert -->
<div class="auth-error hidden bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded-xl mb-4" role="alert">
  <span class="block sm:inline"></span>
</div>

<form id="register-form" class="space-y-4 overflow-hidden">
  <!-- Full Name Input -->
  <div>
    <label for="name" class="block text-sm font-medium text-dark-700 mb-1">Full Name</label>
    <div class="relative">
      <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none text-dark-400">
        <i class="fas fa-user"></i>
      </div>
      <input
        type="text"
        id="name"
        name="name"
        class="w-full pl-10 pr-4 py-2.5 border border-dark-200 rounded-xl focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-transparent"
        placeholder="Enter your full name"
        required
      >
    </div>
  </div>

  <!-- Username Input -->
  <div>
    <label for="username" class="block text-sm font-medium text-dark-700 mb-1">Username</label>
    <div class="relative">
      <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none text-dark-400">
        <i class="fas fa-at"></i>
      </div>
      <input
        type="text"
        id="username"
        name="username"
        class="w-full pl-10 pr-10 py-2.5 border border-dark-200 rounded-xl focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-transparent"
        placeholder="Choose a username"
        pattern="^[a-zA-Z0-9_]{3,20}$"
        title="Username must be 3-20 characters and can only contain letters, numbers, and underscores"
        required
      >
      <div class="username-status absolute inset-y-0 right-0 pr-3 flex items-center">
        <!-- Status icon will be added here dynamically -->
      </div>
    </div>
    <p class="username-message mt-0.5 text-xs text-dark-500">3-20 characters, letters, numbers, and underscores only</p>
  </div>

  <!-- Email Input -->
  <div>
    <label for="email" class="block text-sm font-medium text-dark-700 mb-1">Email Address</label>
    <div class="relative">
      <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none text-dark-400">
        <i class="fas fa-envelope"></i>
      </div>
      <input
        type="email"
        id="email"
        name="email"
        class="w-full pl-10 pr-10 py-2.5 border border-dark-200 rounded-xl focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-transparent"
        placeholder="Enter your email"
        required
      >
      <div class="email-status absolute inset-y-0 right-0 pr-3 flex items-center">
        <!-- Status icon will be added here dynamically -->
      </div>
    </div>
    <p class="email-message mt-0.5 text-xs text-dark-500">We'll never share your email with anyone else</p>
  </div>

  <!-- Password Input -->
  <div>
    <label for="password" class="block text-sm font-medium text-dark-700 mb-1">Password</label>
    <div class="relative">
      <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none text-dark-400">
        <i class="fas fa-lock"></i>
      </div>
      <input
        type="password"
        id="password"
        name="password"
        class="w-full pl-10 pr-10 py-2.5 border border-dark-200 rounded-xl focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-transparent"
        placeholder="Create a password"
        required
      >
      <button
        type="button"
        class="absolute inset-y-0 right-0 pr-3 flex items-center text-dark-400 hover:text-dark-600"
        onclick="togglePasswordVisibility('password', 'togglePassword')"
      >
        <i class="fas fa-eye" id="togglePassword"></i>
      </button>
    </div>
    <!-- Password strength meter commented out for now -->
    <!--
    <div class="password-strength mt-2">
      <div class="flex items-center space-x-2 mb-1">
        <div class="text-xs font-medium text-dark-600">Password Strength:</div>
        <div class="flex-1 h-1.5 bg-dark-100 rounded-full overflow-hidden">
          <div id="password-strength-bar" class="h-full w-0 bg-red-500 transition-all duration-300"></div>
        </div>
        <div id="password-strength-text" class="text-xs font-medium text-red-500">Weak</div>
      </div>
      <p class="text-xs text-dark-500">8+ chars with 1 uppercase, 1 number, 1 special character</p>
    </div>
    -->
    <p class="text-xs text-dark-500 mt-1">Choose a secure password</p>
  </div>

  <!-- Confirm Password Input -->
  <div>
    <label for="confirm-password" class="block text-sm font-medium text-dark-700 mb-1">Confirm Password</label>
    <div class="relative">
      <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none text-dark-400">
        <i class="fas fa-lock"></i>
      </div>
      <input
        type="password"
        id="confirm-password"
        name="confirm-password"
        class="w-full pl-10 pr-10 py-2.5 border border-dark-200 rounded-xl focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-transparent"
        placeholder="Confirm your password"
        required
      >
      <button
        type="button"
        class="absolute inset-y-0 right-0 pr-3 flex items-center text-dark-400 hover:text-dark-600"
        onclick="togglePasswordVisibility('confirm-password', 'toggleConfirmPassword')"
      >
        <i class="fas fa-eye" id="toggleConfirmPassword"></i>
      </button>
    </div>
  </div>

  <!-- Terms and Conditions -->
  <div class="flex items-start">
    <div class="flex items-center h-5">
      <input
        type="checkbox"
        id="terms"
        name="terms"
        class="h-4 w-4 text-primary-500 focus:ring-primary-500 border-dark-300 rounded"
        required
      >
    </div>
    <div class="ml-3 text-sm">
      <label for="terms" class="text-dark-700">
        I agree to the <a href="#" class="text-primary-500 hover:text-primary-600">Terms of Service</a> and <a href="#" class="text-primary-500 hover:text-primary-600">Privacy Policy</a>
      </label>
    </div>
  </div>

  <!-- Submit Button -->
  <button
    type="submit"
    class="w-full py-2.5 px-4 bg-gradient-to-r from-primary-500 to-secondary-500 text-white font-medium rounded-xl hover:shadow-lg transition-all duration-200 mt-4"
  >
    Create Account
  </button>

  <!-- Divider -->
  <div class="relative flex items-center justify-center mt-6 mb-6">
    <div class="w-full border-t border-dark-200"></div>
    <div class="absolute bg-white px-4 text-sm text-dark-500">Or sign up with</div>
  </div>

  <!-- Social Login Buttons -->
  <div class="grid grid-cols-2 gap-4">
    <button
      type="button"
      class="flex items-center justify-center py-2 px-4 bg-white border border-dark-200 rounded-xl hover:bg-dark-50 transition-all duration-200"
    >
      <svg class="w-5 h-5 mr-2" viewBox="0 0 24 24">
        <path fill="#4285F4" d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z" />
        <path fill="#34A853" d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z" />
        <path fill="#FBBC05" d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z" />
        <path fill="#EA4335" d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z" />
      </svg>
      Google
    </button>
    <button
      type="button"
      class="flex items-center justify-center py-2 px-4 bg-white border border-dark-200 rounded-xl hover:bg-dark-50 transition-all duration-200"
    >
      <svg class="w-5 h-5 mr-2" viewBox="0 0 24 24">
        <path fill="#1877F2" d="M24 12.073c0-6.627-5.373-12-12-12s-12 5.373-12 12c0 5.99 4.388 10.954 10.125 11.854v-8.385H7.078v-3.47h3.047V9.43c0-3.007 1.792-4.669 4.533-4.669 1.312 0 2.686.235 2.686.235v2.953H15.83c-1.491 0-1.956.925-1.956 1.874v2.25h3.328l-.532 3.47h-2.796v8.385C19.612 23.027 24 18.062 24 12.073z" />
      </svg>
      Facebook
    </button>
  </div>

  <!-- Sign In Link -->
  <div class="text-center mt-4">
    <p class="text-dark-600">
      Already have an account?
      <a href="/auth/login" class="text-primary-500 hover:text-primary-600 font-medium">Sign in</a>
    </p>
  </div>
</form>

<script>
  // Define a simple inline authentication service
  const InlineAuthService = {
    // API URL
    apiUrl: 'http://localhost:3001',

    // Check if username exists
    checkUsername: async function(username) {
      try {
        // First, get all users from db.json
        const response = await fetch(`${this.apiUrl}/users`);
        if (!response.ok) {
          throw new Error('Failed to fetch users');
        }

        const users = await response.json();

        // Check if username exists (case insensitive)
        return users.some(user =>
          user.username && user.username.toLowerCase() === username.toLowerCase()
        );
      } catch (error) {
        console.error('Error checking username:', error);
        return false;
      }
    },

    // Check if email exists
    checkEmail: async function(email) {
      try {
        // First, get all users from db.json
        const response = await fetch(`${this.apiUrl}/users`);
        if (!response.ok) {
          throw new Error('Failed to fetch users');
        }

        const users = await response.json();

        // Check if email exists (case insensitive)
        return users.some(user =>
          user.email && user.email.toLowerCase() === email.toLowerCase()
        );
      } catch (error) {
        console.error('Error checking email:', error);
        return false;
      }
    },

    // Register a new user
    register: async function(userData) {
      try {
        // Double-check if username already exists
        const usernameExists = await this.checkUsername(userData.username);
        if (usernameExists) {
          return { success: false, message: 'Username already exists' };
        }

        // Double-check if email already exists
        const emailExists = await this.checkEmail(userData.email);
        if (emailExists) {
          return { success: false, message: 'Email already exists' };
        }

        // Get all users to determine next ID
        const usersResponse = await fetch(`${this.apiUrl}/users`);
        const users = await usersResponse.json();

        // Generate ID (use numeric ID for compatibility)
        let nextId = 1;
        if (users.length > 0) {
          // Find the highest numeric ID and increment
          const numericIds = users
            .map(user => parseInt(user.id))
            .filter(id => !isNaN(id));

          if (numericIds.length > 0) {
            nextId = Math.max(...numericIds) + 1;
          }
        }

        // Generate random color for avatar
        const colors = ['0D8ABC', '8B5CF6', '10B981', 'F59E0B', 'EF4444', '6366F1'];
        const randomColor = colors[Math.floor(Math.random() * colors.length)];

        // Current timestamp
        const timestamp = new Date().toISOString();

        // Prepare complete user data
        const completeUserData = {
          id: nextId.toString(), // Convert to string for consistency
          ...userData,
          avatar: `https://ui-avatars.com/api/?name=${encodeURIComponent(userData.name)}&background=${randomColor}&color=fff`,
          followers: [],
          following: [],
          createdAt: timestamp,
          updatedAt: timestamp,
          notifications: 0,
          messages: 0
        };

        // Create new user
        const response = await fetch(`${this.apiUrl}/users`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify(completeUserData)
        });

        if (!response.ok) {
          const errorText = await response.text();
          console.error('Server response:', errorText);
          throw new Error(`Failed to register user: ${response.status} ${response.statusText}`);
        }

        const newUser = await response.json();
        console.log('User registered successfully:', newUser);

        // Save user data to local storage (without password)
        const { password, ...userWithoutPassword } = newUser;
        localStorage.setItem('currentUser', JSON.stringify(userWithoutPassword));

        // Generate and store auth token
        const token = this.generateToken();
        localStorage.setItem('authToken', token);

        // Create a session in db.json
        try {
          await fetch(`${this.apiUrl}/sessions`, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({
              userId: newUser.id,
              token: token,
              createdAt: timestamp
            })
          });
        } catch (sessionError) {
          console.error('Error creating session:', sessionError);
          // Continue even if session creation fails
        }

        return { success: true, user: newUser };
      } catch (error) {
        console.error('Registration error:', error);
        return { success: false, message: 'An error occurred during registration: ' + error.message };
      }
    },

    // Generate a simple token
    generateToken: function() {
      return Math.random().toString(36).substring(2, 15) +
             Math.random().toString(36).substring(2, 15);
    }
  };

  // Toggle password visibility
  function togglePasswordVisibility(inputId, toggleId) {
    const passwordInput = document.getElementById(inputId);
    const toggleIcon = document.getElementById(toggleId);

    if (passwordInput.type === 'password') {
      passwordInput.type = 'text';
      toggleIcon.classList.remove('fa-eye');
      toggleIcon.classList.add('fa-eye-slash');
    } else {
      passwordInput.type = 'password';
      toggleIcon.classList.remove('fa-eye-slash');
      toggleIcon.classList.add('fa-eye');
    }
  }

  // Password strength checking commented out for now
  /*
  function checkPasswordStrength(password) {
    let strength = 0;
    const feedback = {
      strength: 0,
      text: 'Weak',
      color: 'bg-red-500',
      textColor: 'text-red-500'
    };

    // Length check
    if (password.length >= 8) strength += 1;
    if (password.length >= 12) strength += 1;

    // Character type checks
    if (/[A-Z]/.test(password)) strength += 1;
    if (/[a-z]/.test(password)) strength += 1;
    if (/[0-9]/.test(password)) strength += 1;
    if (/[^A-Za-z0-9]/.test(password)) strength += 1;

    // Variety check
    const uniqueChars = new Set(password).size;
    if (uniqueChars > 5) strength += 1;
    if (uniqueChars > 8) strength += 1;

    // Set feedback based on strength
    if (strength < 3) {
      feedback.strength = 20;
      feedback.text = 'Weak';
      feedback.color = 'bg-red-500';
      feedback.textColor = 'text-red-500';
    } else if (strength < 5) {
      feedback.strength = 40;
      feedback.text = 'Fair';
      feedback.color = 'bg-orange-500';
      feedback.textColor = 'text-orange-500';
    } else if (strength < 7) {
      feedback.strength = 60;
      feedback.text = 'Good';
      feedback.color = 'bg-yellow-500';
      feedback.textColor = 'text-yellow-600';
    } else if (strength < 9) {
      feedback.strength = 80;
      feedback.text = 'Strong';
      feedback.color = 'bg-green-500';
      feedback.textColor = 'text-green-500';
    } else {
      feedback.strength = 100;
      feedback.text = 'Very Strong';
      feedback.color = 'bg-primary-500';
      feedback.textColor = 'text-primary-500';
    }

    return feedback;
  }
  */

  // Setup username validation
  let usernameTimer;
  async function validateUsername(username) {
    const usernameStatus = document.querySelector('.username-status');
    const usernameMessage = document.querySelector('.username-message');

    // Clear previous status
    usernameStatus.innerHTML = '<div class="animate-spin h-5 w-5 border-2 border-primary-500 rounded-full border-t-transparent"></div>';

    // Basic validation
    const usernameRegex = /^[a-zA-Z0-9_]{3,20}$/;
    if (!usernameRegex.test(username)) {
      usernameStatus.innerHTML = '<i class="fas fa-times-circle text-red-500"></i>';
      usernameMessage.textContent = 'Username must be 3-20 characters and can only contain letters, numbers, and underscores';
      usernameMessage.classList.remove('text-dark-500', 'text-green-500');
      usernameMessage.classList.add('text-red-500');
      return false;
    }

    // Check if username exists
    const exists = await InlineAuthService.checkUsername(username);
    if (exists) {
      usernameStatus.innerHTML = '<i class="fas fa-times-circle text-red-500"></i>';
      usernameMessage.textContent = 'Username already taken';
      usernameMessage.classList.remove('text-dark-500', 'text-green-500');
      usernameMessage.classList.add('text-red-500');
      return false;
    }

    // Username is valid and available
    usernameStatus.innerHTML = '<i class="fas fa-check-circle text-green-500"></i>';
    usernameMessage.textContent = 'Username available';
    usernameMessage.classList.remove('text-dark-500', 'text-red-500');
    usernameMessage.classList.add('text-green-500');
    return true;
  }

  // Setup email validation
  let emailTimer;
  async function validateEmail(email) {
    const emailStatus = document.querySelector('.email-status');
    const emailMessage = document.querySelector('.email-message');

    // Clear previous status
    emailStatus.innerHTML = '<div class="animate-spin h-5 w-5 border-2 border-primary-500 rounded-full border-t-transparent"></div>';

    // Basic validation
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(email)) {
      emailStatus.innerHTML = '<i class="fas fa-times-circle text-red-500"></i>';
      emailMessage.textContent = 'Please enter a valid email address';
      emailMessage.classList.remove('text-dark-500', 'text-green-500');
      emailMessage.classList.add('text-red-500');
      return false;
    }

    // Check if email exists
    const exists = await InlineAuthService.checkEmail(email);
    if (exists) {
      emailStatus.innerHTML = '<i class="fas fa-times-circle text-red-500"></i>';
      emailMessage.textContent = 'Email already registered';
      emailMessage.classList.remove('text-dark-500', 'text-green-500');
      emailMessage.classList.add('text-red-500');
      return false;
    }

    // Email is valid and available
    emailStatus.innerHTML = '<i class="fas fa-check-circle text-green-500"></i>';
    emailMessage.textContent = 'Email available';
    emailMessage.classList.remove('text-dark-500', 'text-red-500');
    emailMessage.classList.add('text-green-500');
    return true;
  }

  // Handle register form submission
  document.addEventListener('DOMContentLoaded', function() {
    // Setup username validation
    const usernameInput = document.getElementById('username');
    if (usernameInput) {
      usernameInput.addEventListener('input', function() {
        const username = this.value.trim();

        // Clear previous timer
        clearTimeout(usernameTimer);

        // Don't check if username is too short
        if (username.length < 3) {
          const usernameStatus = document.querySelector('.username-status');
          const usernameMessage = document.querySelector('.username-message');
          usernameStatus.innerHTML = '';
          usernameMessage.textContent = '3-20 characters, letters, numbers, and underscores only';
          usernameMessage.classList.remove('text-green-500', 'text-red-500');
          usernameMessage.classList.add('text-dark-500');
          return;
        }

        // Set a timer to avoid too many API calls
        usernameTimer = setTimeout(() => {
          validateUsername(username);
        }, 500);
      });
    }

    // Setup email validation
    const emailInput = document.getElementById('email');
    if (emailInput) {
      emailInput.addEventListener('input', function() {
        const email = this.value.trim();

        // Clear previous timer
        clearTimeout(emailTimer);

        // Don't check if email is too short
        if (email.length < 5 || !email.includes('@')) {
          const emailStatus = document.querySelector('.email-status');
          const emailMessage = document.querySelector('.email-message');
          emailStatus.innerHTML = '';
          emailMessage.textContent = "We'll never share your email with anyone else";
          emailMessage.classList.remove('text-green-500', 'text-red-500');
          emailMessage.classList.add('text-dark-500');
          return;
        }

        // Set a timer to avoid too many API calls
        emailTimer = setTimeout(() => {
          validateEmail(email);
        }, 500);
      });
    }

    // Password strength meter setup commented out for now
    /*
    const passwordInput = document.getElementById('password');
    const strengthBar = document.getElementById('password-strength-bar');
    const strengthText = document.getElementById('password-strength-text');

    if (passwordInput && strengthBar && strengthText) {
      passwordInput.addEventListener('input', function() {
        const password = this.value;
        const feedback = checkPasswordStrength(password);

        // Update strength bar
        strengthBar.style.width = `${feedback.strength}%`;
        strengthBar.className = `h-full transition-all duration-300 ${feedback.color}`;

        // Update strength text
        strengthText.textContent = feedback.text;
        strengthText.className = `text-xs font-medium ${feedback.textColor}`;
      });
    }
    */

    const passwordInput = document.getElementById('password');

    // Setup confirm password validation
    const confirmPasswordInput = document.getElementById('confirm-password');
    if (confirmPasswordInput && passwordInput) {
      confirmPasswordInput.addEventListener('input', function() {
        if (this.value && this.value !== passwordInput.value) {
          this.setCustomValidity('Passwords do not match');
        } else {
          this.setCustomValidity('');
        }
      });

      passwordInput.addEventListener('input', function() {
        if (confirmPasswordInput.value && confirmPasswordInput.value !== this.value) {
          confirmPasswordInput.setCustomValidity('Passwords do not match');
        } else {
          confirmPasswordInput.setCustomValidity('');
        }
      });
    }

    // Handle form submission
    document.getElementById('register-form').addEventListener('submit', async function(event) {
      event.preventDefault();

      // Get form data
      const name = document.getElementById('name').value.trim();
      const username = document.getElementById('username').value.trim();
      const email = document.getElementById('email').value.trim();
      const password = document.getElementById('password').value;
      const confirmPassword = document.getElementById('confirm-password').value;
      const termsChecked = document.getElementById('terms').checked;

      // Validate form data
      if (!name || !username || !email || !password || !confirmPassword) {
        showAuthError('Please fill in all fields');
        return;
      }

      if (password !== confirmPassword) {
        showAuthError('Passwords do not match');
        return;
      }

      if (!termsChecked) {
        showAuthError('You must agree to the Terms of Service and Privacy Policy');
        return;
      }

      // Validate username one more time
      const usernameValid = await validateUsername(username);
      if (!usernameValid) {
        showAuthError('Username is invalid or already taken');
        return;
      }

      // Validate email one more time
      const emailValid = await validateEmail(email);
      if (!emailValid) {
        showAuthError('Email is invalid or already registered');
        return;
      }

      // Show loading state
      const submitButton = document.querySelector('button[type="submit"]');
      const originalButtonText = submitButton.textContent;
      submitButton.disabled = true;
      submitButton.textContent = 'Creating account...';

      try {
        // Register user using the inline service
        const result = await InlineAuthService.register({
          name,
          username,
          email,
          password,
          bio: ''
        });

        if (result.success) {
          // Registration successful
          window.location.href = '/';
        } else {
          // Registration failed
          showAuthError(result.message);
          submitButton.disabled = false;
          submitButton.textContent = originalButtonText;
        }
      } catch (error) {
        console.error('Error registering:', error);
        showAuthError('An error occurred during registration');
        submitButton.disabled = false;
        submitButton.textContent = originalButtonText;
      }
    });
  });

  // Show auth error
  function showAuthError(message) {
    const errorAlert = document.querySelector('.auth-error');

    if (errorAlert) {
      const errorSpan = errorAlert.querySelector('span') || errorAlert;
      errorSpan.textContent = message;
      errorAlert.classList.remove('hidden');

      // Hide error after 5 seconds
      setTimeout(() => {
        errorAlert.classList.add('hidden');
      }, 5000);
    }
  }
</script>
