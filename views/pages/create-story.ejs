<div class="max-w-3xl mx-auto">
  <!-- Create Story Header -->
  <div class="mb-6">
    <h1 class="text-3xl font-bold bg-gradient-to-r from-primary-500 to-secondary-500 text-transparent bg-clip-text">Create Story</h1>
    <p class="text-dark-500 mt-2">Share a moment that disappears after 24 hours</p>
  </div>

  <!-- Create Story Form -->
  <div class="bg-white rounded-2xl shadow-sm overflow-hidden mb-6">
    <div class="p-6">
      <!-- User Info - Will be populated dynamically -->
      <div class="flex items-center space-x-3 mb-6">
        <div id="userInitials" class="w-12 h-12 rounded-full bg-primary-500 flex items-center justify-center text-white font-bold">
          <!-- User initials will be inserted here -->
        </div>
        <div>
          <h3 id="userName" class="font-semibold text-dark-900">
            <!-- User name will be inserted here -->
          </h3>
          <div class="flex items-center text-dark-500 text-sm">
            <i class="fas fa-globe-americas mr-1.5"></i>
            <select id="privacySelect" class="bg-transparent border-none focus:ring-0 p-0 pr-6 text-dark-500">
              <option value="Public">Public</option>
              <option value="Friends Only">Friends Only</option>
              <option value="Close Friends">Close Friends</option>
            </select>
            <i class="fas fa-chevron-down ml-1 text-xs"></i>
          </div>
        </div>
      </div>

      <!-- Story Preview -->
      <div class="mb-6">
        <div class="aspect-[9/16] max-h-[70vh] bg-dark-100 rounded-xl overflow-hidden relative flex items-center justify-center">
          <div id="storyPreview" class="w-full h-full flex items-center justify-center text-dark-400">
            <div class="text-center">
              <i class="fas fa-image text-6xl mb-4"></i>
              <p>Preview will appear here</p>
            </div>
          </div>
          <div id="previewOverlay" class="absolute inset-0 bg-gradient-to-t from-black/60 to-transparent opacity-0 transition-opacity"></div>
          <div id="previewText" class="absolute bottom-6 left-6 right-6 text-white opacity-0 transition-opacity">
            <p class="text-lg font-medium" id="previewCaption"></p>
          </div>
        </div>
      </div>

      <!-- Upload Area -->
      <div class="border-2 border-dashed border-dark-200 rounded-xl p-8 mb-6 text-center" id="uploadArea">
        <div class="mb-4">
          <i class="fas fa-cloud-upload-alt text-4xl text-dark-400"></i>
        </div>
        <h4 class="font-semibold text-dark-800 mb-2">Upload media for your story</h4>
        <p class="text-dark-500 text-sm mb-4">Support for images and videos (max 15 seconds)</p>
        <input type="file" id="storyMedia" accept="image/*,video/*" class="hidden">
        <button 
          id="chooseFileBtn"
          class="bg-primary-500 text-white px-6 py-2.5 rounded-full hover:bg-primary-600 transition-colors shadow-sm"
        >
          Choose File
        </button>
      </div>

      <!-- Caption Input -->
      <div class="mb-6">
        <label for="storyCaption" class="block text-sm font-medium text-dark-700 mb-2">Add a caption</label>
        <textarea 
          id="storyCaption" 
          placeholder="Write something..." 
          class="w-full border border-dark-200 rounded-xl p-4 min-h-[80px] focus:ring-2 focus:ring-primary-500 focus:border-transparent transition-all resize-none"
          maxlength="150"
          oninput="updatePreview()"
        ></textarea>
        <div class="flex justify-end mt-1">
          <span class="text-xs text-dark-500"><span id="captionLength">0</span>/150</span>
        </div>
      </div>

      <!-- Story Options -->
      <div class="border-t border-dark-100 pt-6">
        <h3 class="font-semibold mb-4 flex items-center">
          <i class="fas fa-sliders-h text-primary-500 mr-2"></i>
          Story Options
        </h3>
        
        <div class="space-y-4">
          <!-- Allow Replies -->
          <div class="flex items-center justify-between">
            <div>
              <h4 class="font-medium text-dark-900">Allow Replies</h4>
              <p class="text-dark-500 text-sm">Let people reply to your story</p>
            </div>
            
            <label class="relative inline-flex items-center cursor-pointer">
              <input type="checkbox" value="" class="sr-only peer" checked>
              <div class="w-11 h-6 bg-dark-200 peer-focus:outline-none peer-focus:ring-2 peer-focus:ring-primary-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-dark-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-primary-500"></div>
            </label>
          </div>
          
          <!-- Close Friends Only -->
          <div class="flex items-center justify-between">
            <div>
              <h4 class="font-medium text-dark-900">Close Friends Only</h4>
              <p class="text-dark-500 text-sm">Only show to people on your close friends list</p>
            </div>
            
            <label class="relative inline-flex items-center cursor-pointer">
              <input type="checkbox" value="" class="sr-only peer">
              <div class="w-11 h-6 bg-dark-200 peer-focus:outline-none peer-focus:ring-2 peer-focus:ring-primary-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-dark-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-primary-500"></div>
            </label>
          </div>
          
          <!-- Hide View Count -->
          <div class="flex items-center justify-between">
            <div>
              <h4 class="font-medium text-dark-900">Hide View Count</h4>
              <p class="text-dark-500 text-sm">Don't show how many people viewed your story</p>
            </div>
            
            <label class="relative inline-flex items-center cursor-pointer">
              <input type="checkbox" value="" class="sr-only peer">
              <div class="w-11 h-6 bg-dark-200 peer-focus:outline-none peer-focus:ring-2 peer-focus:ring-primary-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-dark-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-primary-500"></div>
            </label>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Action Buttons -->
  <div class="flex justify-end space-x-3 mb-10">
    <a href="/" class="px-6 py-2.5 border border-dark-200 text-dark-700 rounded-full hover:bg-dark-50 transition-colors">
      Cancel
    </a>
    <button id="publishStory" class="px-6 py-2.5 bg-primary-500 text-white rounded-full hover:bg-primary-600 transition-colors shadow-sm">
      Share Story
    </button>
  </div>
</div>

<script src="/js/fileUploadService.js"></script>
<script>
  function updatePreview() {
    const captionInput = document.getElementById('storyCaption');
    const previewCaption = document.getElementById('previewCaption');
    const captionLength = document.getElementById('captionLength');
    
    if (captionInput && previewCaption && captionLength) {
      previewCaption.textContent = captionInput.value;
      captionLength.textContent = captionInput.value.length;
      
      // Show overlay and text if there's content
      const previewOverlay = document.getElementById('previewOverlay');
      const previewText = document.getElementById('previewText');
      
      if (previewOverlay && previewText) {
        if (captionInput.value.trim().length > 0) {
          previewOverlay.classList.add('opacity-100');
          previewText.classList.add('opacity-100');
        } else if (!document.getElementById('storyMedia').files[0]) {
          previewOverlay.classList.remove('opacity-100');
          previewText.classList.remove('opacity-100');
        }
      }
    }
  }

  document.addEventListener('DOMContentLoaded', function() {
    // Get DOM elements
    const storyMedia = document.getElementById('storyMedia');
    const storyPreview = document.getElementById('storyPreview');
    const chooseFileBtn = document.getElementById('chooseFileBtn');
    const uploadArea = document.getElementById('uploadArea');
    let selectedFile = null;
    
    // Load user data from localStorage
    const currentUser = JSON.parse(localStorage.getItem('currentUser'));
    
    if (currentUser) {
      // Populate user info
      const userInitials = document.getElementById('userInitials');
      const userName = document.getElementById('userName');
      
      if (userInitials && userName) {
        // Set user initials
        const initials = currentUser.name
          .split(' ')
          .map(name => name[0])
          .join('')
          .toUpperCase();
        userInitials.textContent = initials;
        
        // Set user name
        userName.textContent = currentUser.name;
      }
    } else {
      // Redirect to login if not logged in
      window.location.href = '/auth/login';
    }
    
    // Make sure the file input is properly initialized
    if (!storyMedia) {
      console.error('Story media input element not found');
      return;
    }
    
    // Clear any previous file selection
    storyMedia.value = '';
    
    // Update file upload handling with improved event binding
    if (chooseFileBtn) {
      chooseFileBtn.addEventListener('click', function(e) {
        e.preventDefault();
        e.stopPropagation();
        console.log('Choose file button clicked');
        
        // Trigger file input click directly
        if (storyMedia) {
          storyMedia.click();
        } else {
          console.error('Story media input not found');
        }
      });
    }
    
    // Add click handler to the upload area as well
    if (uploadArea) {
      uploadArea.addEventListener('click', function(e) {
        // Don't trigger if clicking on the button (let the button handler work)
        if (e.target !== chooseFileBtn && !chooseFileBtn.contains(e.target)) {
          console.log('Upload area clicked');
          if (storyMedia) {
            storyMedia.click();
          }
        }
      });
    }

    // Improved file change handler
    if (storyMedia) {
      storyMedia.addEventListener('change', function(e) {
        console.log('File input change event triggered');
        const file = this.files && this.files[0];
        
        if (!file) {
          console.log('No file selected');
          return;
        }
        
        console.log('File selected:', file.name, file.type, file.size);
        
        // Validate file type
        if (!file.type.startsWith('image/') && !file.type.startsWith('video/')) {
          alert('Please select an image or video file');
          this.value = ''; // Clear the input
          return;
        }
        
        // Validate file size (max 10MB)
        if (file.size > 10 * 1024 * 1024) {
          alert('File size exceeds 10MB limit');
          this.value = ''; // Clear the input
          return;
        }
        
        selectedFile = file;
        const reader = new FileReader();
        
        reader.onload = function(event) {
          if (!storyPreview) {
            console.error('Story preview element not found');
            return;
          }
          
          const previewOverlay = document.getElementById('previewOverlay');
          const previewText = document.getElementById('previewText');
          
          if (file.type.startsWith('image/')) {
            storyPreview.innerHTML = `<img src="${event.target.result}" class="w-full h-full object-cover">`;
          } else if (file.type.startsWith('video/')) {
            storyPreview.innerHTML = `
              <video src="${event.target.result}" class="w-full h-full object-cover" autoplay muted loop></video>
            `;
          }
          
          if (previewOverlay) previewOverlay.classList.add('opacity-100');
          if (previewText) previewText.classList.add('opacity-100');
          
          // Hide the upload area
          if (uploadArea) uploadArea.classList.add('hidden');
          
          // Store the selected file in a global variable for later use
          window.selectedStoryFile = file;
          
          console.log('Preview updated successfully');
        };
        
        reader.onerror = function(error) {
          console.error('Error reading file:', error);
          alert('Error reading the selected file. Please try again.');
        };
        
        console.log('Starting to read file as data URL');
        reader.readAsDataURL(file);
      });
    }

    // Update publish button handling
    document.getElementById('publishStory').addEventListener('click', async function() {
      // Get the selected file from the global variable or from the input
      const selectedFile = window.selectedStoryFile || 
                          (document.getElementById('storyMedia').files && 
                           document.getElementById('storyMedia').files[0]);
      
      if (!selectedFile) {
        alert('Please select a media file for your story');
        return;
      }
      
      try {
        // Show loading state
        this.disabled = true;
        this.innerHTML = '<i class="fas fa-spinner fa-spin mr-2"></i> Publishing...';
        
        // Get caption
        const caption = document.getElementById('storyCaption').value || '';
        
        console.log('Uploading file to server...', selectedFile);
        
        // Upload the file to the images folder
        const formData = new FormData();
        formData.append('file', selectedFile);
        
        const uploadResponse = await fetch('/upload', {
          method: 'POST',
          body: formData
        });
        
        if (!uploadResponse.ok) {
          throw new Error('Failed to upload media');
        }
        
        const uploadResult = await uploadResponse.json();
        const mediaUrl = uploadResult.filePath; // This will be like /images/filename.jpg
        
        if (!mediaUrl) {
          throw new Error('Failed to get media URL');
        }
        
        console.log('File uploaded successfully, URL:', mediaUrl);
        
        // Create story with the file path
        const now = new Date();
        const expiresAt = new Date(now.getTime() + 24 * 60 * 60 * 1000).toISOString();
        
        // Get privacy and settings values
        const privacy = document.getElementById('privacySelect').value;

        // Get checkboxes by their parent containers to ensure we get the right ones
        const checkboxes = document.querySelectorAll('.flex.items-center.justify-between input[type="checkbox"]');
        const allowReplies = checkboxes[0] ? checkboxes[0].checked : true;
        const closeFriendsOnly = checkboxes[1] ? checkboxes[1].checked : false;
        const hideViewCount = checkboxes[2] ? checkboxes[2].checked : false;

        console.log('Creating story with media URL:', mediaUrl);
        
        // Save to db.json using JSON Server endpoint
        const response = await fetch('http://localhost:3001/stories', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            id: Date.now().toString(), // Generate a unique ID
            userId: currentUser.id,
            media: {
              type: selectedFile.type.startsWith('image/') ? 'image' : 'video',
              url: mediaUrl.startsWith('/') ? mediaUrl : `/${mediaUrl}` // Ensure URL has leading slash
            },
            caption: caption,
            privacy: privacy,
            settings: {
              allowReplies: allowReplies,
              closeFriendsOnly: closeFriendsOnly,
              hideViewCount: hideViewCount
            },
            views: [],
            createdAt: now.toISOString(),
            expiresAt: expiresAt
          })
        });
        
        if (!response.ok) {
          const errorData = await response.json();
          throw new Error(errorData.error || 'Failed to create story');
        }
        
        console.log('Story saved to database successfully');
        
        // Redirect to stories page
        window.location.href = '/';
      } catch (error) {
        console.error('Error publishing story:', error);
        alert(`Error publishing story: ${error.message}`);
        
        // Reset button state
        this.disabled = false;
        this.innerHTML = 'Share Story';
      }
    });
  });
</script>
